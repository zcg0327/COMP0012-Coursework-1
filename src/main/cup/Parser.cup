import java_cup.runtime.*;

scan with {: return lexer.next_token(); :};

parser code {:

  private boolean debug = false;
  public boolean  debug()         {return debug;}
  public void     debug(boolean b){debug = b;}

  private Lexer lexer;

  public Parser(Lexer lexer) {
    super(lexer);
    this.lexer = lexer;
  }

  public void syntax_error(Symbol current_token) {
    report_error(
        "Syntax error at line " + (current_token.left+1) + ", column "
        + current_token.right + ". ", null
    );
  }

:};

// Keywords, Identifiers
terminal    IDENTIFIER,         // id
            SECURITY_LOW,       // Low security
            SECURITY_HIGH,      // High security
            CHAR,               // char
            BOOL,               // bool
            INT,                // int
            RAT,                // rat
            FLOAT,              // float
            SEQ,                // seq
            TOP,                // top
            LEN,                // len
            IN,                 // in
            TDEF,               // Type definition
            ALIAS,              // Type alias
            FDEF,               // Function definition
            MAIN,               // Special main method
            READ,               // Input
            PRINT,              // Output
            IF,                 // If-begin
            FI,                 // If-end
            THEN,
            ELSE,
            LOOP,               // Loop-begin
            POOL,               // Loop-end
            BREAK,
            RETURN,
            TRUE,               // T
            FALSE               // F
            ;

// Literals
terminal    CHAR_LITERAL,       // 'x'
            INT_LITERAL,        // 123
            RAT_LITERAL,        // 1/2
            FLOAT_LITERAL,      // 1.234
            STRING_LITERAL      // "hello, world"
            ;

// Separators, Grouping Operators, Terminators
terminal    LPAREN,             // (
            RPAREN,             // )
            LANGLE,             // <        // N.B. also the less than operator
            RANGLE,             // >
            LBRACE,             // {
            RBRACE,             // }
            LBRACKET,           // [
            RBRACKET,           // ]
            SEMICOLON,          // ;
            COMMA               // ,
            ;

// Operators
terminal    ASSIGN,             // :=
            COLON,              // :
            PLUS,               // +
            MINUS,              // -
            DIV,                // /
            MULT,               // *
            NOT,                // !
            AND,                // &&
            OR,                 // ||
            CONCAT,             // ::
            LESS_EQ,            // <=
            EQ,                 // =
            NEQ,                // !=
            DOT                 // .
            ;

terminal    BADCHAR;

nonterminal zsec_program;

zsec_program ::= IDENTIFIER {: System.out.println("TEST"); :};
